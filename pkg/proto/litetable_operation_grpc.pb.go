// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/litetable_operation.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LitetableService_Read_FullMethodName = "/litetable.server.v1.LitetableService/Read"
)

// LitetableServiceClient is the client API for LitetableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LitetableServiceClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*LitetableData, error)
}

type litetableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLitetableServiceClient(cc grpc.ClientConnInterface) LitetableServiceClient {
	return &litetableServiceClient{cc}
}

func (c *litetableServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*LitetableData, error) {
	out := new(LitetableData)
	err := c.cc.Invoke(ctx, LitetableService_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LitetableServiceServer is the server API for LitetableService service.
// All implementations must embed UnimplementedLitetableServiceServer
// for forward compatibility
type LitetableServiceServer interface {
	Read(context.Context, *ReadRequest) (*LitetableData, error)
	mustEmbedUnimplementedLitetableServiceServer()
}

// UnimplementedLitetableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLitetableServiceServer struct {
}

func (UnimplementedLitetableServiceServer) Read(context.Context, *ReadRequest) (*LitetableData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedLitetableServiceServer) mustEmbedUnimplementedLitetableServiceServer() {}

// UnsafeLitetableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LitetableServiceServer will
// result in compilation errors.
type UnsafeLitetableServiceServer interface {
	mustEmbedUnimplementedLitetableServiceServer()
}

func RegisterLitetableServiceServer(s grpc.ServiceRegistrar, srv LitetableServiceServer) {
	s.RegisterService(&LitetableService_ServiceDesc, srv)
}

func _LitetableService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LitetableServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LitetableService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LitetableServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LitetableService_ServiceDesc is the grpc.ServiceDesc for LitetableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LitetableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "litetable.server.v1.LitetableService",
	HandlerType: (*LitetableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _LitetableService_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/litetable_operation.proto",
}
