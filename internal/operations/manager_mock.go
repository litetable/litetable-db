// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -destination=manager_mock.go -package=operations -source=manager.go
//

// Package operations is a generated GoMock package.
package operations

import (
	reflect "reflect"

	cdc_emitter "github.com/litetable/litetable-db/internal/cdc_emitter"
	litetable "github.com/litetable/litetable-db/internal/litetable"
	reaper "github.com/litetable/litetable-db/internal/reaper"
	wal "github.com/litetable/litetable-db/internal/storage/wal"
	gomock "go.uber.org/mock/gomock"
)

// MockwriteAhead is a mock of writeAhead interface.
type MockwriteAhead struct {
	ctrl     *gomock.Controller
	recorder *MockwriteAheadMockRecorder
}

// MockwriteAheadMockRecorder is the mock recorder for MockwriteAhead.
type MockwriteAheadMockRecorder struct {
	mock *MockwriteAhead
}

// NewMockwriteAhead creates a new mock instance.
func NewMockwriteAhead(ctrl *gomock.Controller) *MockwriteAhead {
	mock := &MockwriteAhead{ctrl: ctrl}
	mock.recorder = &MockwriteAheadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwriteAhead) EXPECT() *MockwriteAheadMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockwriteAhead) Apply(e *wal.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockwriteAheadMockRecorder) Apply(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockwriteAhead)(nil).Apply), e)
}

// MockgarbageCollector is a mock of garbageCollector interface.
type MockgarbageCollector struct {
	ctrl     *gomock.Controller
	recorder *MockgarbageCollectorMockRecorder
}

// MockgarbageCollectorMockRecorder is the mock recorder for MockgarbageCollector.
type MockgarbageCollectorMockRecorder struct {
	mock *MockgarbageCollector
}

// NewMockgarbageCollector creates a new mock instance.
func NewMockgarbageCollector(ctrl *gomock.Controller) *MockgarbageCollector {
	mock := &MockgarbageCollector{ctrl: ctrl}
	mock.recorder = &MockgarbageCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgarbageCollector) EXPECT() *MockgarbageCollectorMockRecorder {
	return m.recorder
}

// Reap mocks base method.
func (m *MockgarbageCollector) Reap(p *reaper.ReapParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reap", p)
}

// Reap indicates an expected call of Reap.
func (mr *MockgarbageCollectorMockRecorder) Reap(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reap", reflect.TypeOf((*MockgarbageCollector)(nil).Reap), p)
}

// MockstorageManager is a mock of storageManager interface.
type MockstorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockstorageManagerMockRecorder
}

// MockstorageManagerMockRecorder is the mock recorder for MockstorageManager.
type MockstorageManagerMockRecorder struct {
	mock *MockstorageManager
}

// NewMockstorageManager creates a new mock instance.
func NewMockstorageManager(ctrl *gomock.Controller) *MockstorageManager {
	mock := &MockstorageManager{ctrl: ctrl}
	mock.recorder = &MockstorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageManager) EXPECT() *MockstorageManagerMockRecorder {
	return m.recorder
}

// GetData mocks base method.
func (m *MockstorageManager) GetData() *litetable.Data {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(*litetable.Data)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockstorageManagerMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockstorageManager)(nil).GetData))
}

// IsFamilyAllowed mocks base method.
func (m *MockstorageManager) IsFamilyAllowed(family string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFamilyAllowed", family)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFamilyAllowed indicates an expected call of IsFamilyAllowed.
func (mr *MockstorageManagerMockRecorder) IsFamilyAllowed(family any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFamilyAllowed", reflect.TypeOf((*MockstorageManager)(nil).IsFamilyAllowed), family)
}

// MarkRowChanged mocks base method.
func (m *MockstorageManager) MarkRowChanged(family, rowKey string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkRowChanged", family, rowKey)
}

// MarkRowChanged indicates an expected call of MarkRowChanged.
func (mr *MockstorageManagerMockRecorder) MarkRowChanged(family, rowKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRowChanged", reflect.TypeOf((*MockstorageManager)(nil).MarkRowChanged), family, rowKey)
}

// UpdateFamilies mocks base method.
func (m *MockstorageManager) UpdateFamilies(families []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFamilies", families)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFamilies indicates an expected call of UpdateFamilies.
func (mr *MockstorageManagerMockRecorder) UpdateFamilies(families any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFamilies", reflect.TypeOf((*MockstorageManager)(nil).UpdateFamilies), families)
}

// Mockcdc is a mock of cdc interface.
type Mockcdc struct {
	ctrl     *gomock.Controller
	recorder *MockcdcMockRecorder
}

// MockcdcMockRecorder is the mock recorder for Mockcdc.
type MockcdcMockRecorder struct {
	mock *Mockcdc
}

// NewMockcdc creates a new mock instance.
func NewMockcdc(ctrl *gomock.Controller) *Mockcdc {
	mock := &Mockcdc{ctrl: ctrl}
	mock.recorder = &MockcdcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcdc) EXPECT() *MockcdcMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *Mockcdc) Emit(params *cdc_emitter.CDCParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", params)
}

// Emit indicates an expected call of Emit.
func (mr *MockcdcMockRecorder) Emit(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*Mockcdc)(nil).Emit), params)
}
