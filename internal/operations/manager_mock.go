// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -destination=manager_mock.go -package=operations -source=manager.go
//

// Package operations is a generated GoMock package.
package operations

import (
	reflect "reflect"

	cdc_emitter "github.com/litetable/litetable-db/internal/cdc_emitter"
	litetable "github.com/litetable/litetable-db/internal/litetable"
	wal "github.com/litetable/litetable-db/internal/shard_storage/wal"
	gomock "go.uber.org/mock/gomock"
)

// MockwriteAhead is a mock of writeAhead interface.
type MockwriteAhead struct {
	ctrl     *gomock.Controller
	recorder *MockwriteAheadMockRecorder
}

// MockwriteAheadMockRecorder is the mock recorder for MockwriteAhead.
type MockwriteAheadMockRecorder struct {
	mock *MockwriteAhead
}

// NewMockwriteAhead creates a new mock instance.
func NewMockwriteAhead(ctrl *gomock.Controller) *MockwriteAhead {
	mock := &MockwriteAhead{ctrl: ctrl}
	mock.recorder = &MockwriteAheadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwriteAhead) EXPECT() *MockwriteAheadMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockwriteAhead) Apply(e *wal.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockwriteAheadMockRecorder) Apply(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockwriteAhead)(nil).Apply), e)
}

// MockshardManager is a mock of shardManager interface.
type MockshardManager struct {
	ctrl     *gomock.Controller
	recorder *MockshardManagerMockRecorder
}

// MockshardManagerMockRecorder is the mock recorder for MockshardManager.
type MockshardManagerMockRecorder struct {
	mock *MockshardManager
}

// NewMockshardManager creates a new mock instance.
func NewMockshardManager(ctrl *gomock.Controller) *MockshardManager {
	mock := &MockshardManager{ctrl: ctrl}
	mock.recorder = &MockshardManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshardManager) EXPECT() *MockshardManagerMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockshardManager) Apply(rowKey, family string, qualifiers []string, values [][]byte, timestamp, expiresAt int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", rowKey, family, qualifiers, values, timestamp, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockshardManagerMockRecorder) Apply(rowKey, family, qualifiers, values, timestamp, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockshardManager)(nil).Apply), rowKey, family, qualifiers, values, timestamp, expiresAt)
}

// Delete mocks base method.
func (m *MockshardManager) Delete(key, family string, qualifiers []string, timestamp, expiresAt int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key, family, qualifiers, timestamp, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockshardManagerMockRecorder) Delete(key, family, qualifiers, timestamp, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockshardManager)(nil).Delete), key, family, qualifiers, timestamp, expiresAt)
}

// FilterRowsByPrefix mocks base method.
func (m *MockshardManager) FilterRowsByPrefix(prefix string) (*litetable.Data, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRowsByPrefix", prefix)
	ret0, _ := ret[0].(*litetable.Data)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FilterRowsByPrefix indicates an expected call of FilterRowsByPrefix.
func (mr *MockshardManagerMockRecorder) FilterRowsByPrefix(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRowsByPrefix", reflect.TypeOf((*MockshardManager)(nil).FilterRowsByPrefix), prefix)
}

// FilterRowsByRegex mocks base method.
func (m *MockshardManager) FilterRowsByRegex(regex string) (*litetable.Data, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRowsByRegex", regex)
	ret0, _ := ret[0].(*litetable.Data)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FilterRowsByRegex indicates an expected call of FilterRowsByRegex.
func (mr *MockshardManagerMockRecorder) FilterRowsByRegex(regex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRowsByRegex", reflect.TypeOf((*MockshardManager)(nil).FilterRowsByRegex), regex)
}

// GetRowByFamily mocks base method.
func (m *MockshardManager) GetRowByFamily(key, family string) (*litetable.Data, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRowByFamily", key, family)
	ret0, _ := ret[0].(*litetable.Data)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRowByFamily indicates an expected call of GetRowByFamily.
func (mr *MockshardManagerMockRecorder) GetRowByFamily(key, family any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRowByFamily", reflect.TypeOf((*MockshardManager)(nil).GetRowByFamily), key, family)
}

// IsFamilyAllowed mocks base method.
func (m *MockshardManager) IsFamilyAllowed(family string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFamilyAllowed", family)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFamilyAllowed indicates an expected call of IsFamilyAllowed.
func (mr *MockshardManagerMockRecorder) IsFamilyAllowed(family any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFamilyAllowed", reflect.TypeOf((*MockshardManager)(nil).IsFamilyAllowed), family)
}

// UpdateFamilies mocks base method.
func (m *MockshardManager) UpdateFamilies(families []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFamilies", families)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFamilies indicates an expected call of UpdateFamilies.
func (mr *MockshardManagerMockRecorder) UpdateFamilies(families any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFamilies", reflect.TypeOf((*MockshardManager)(nil).UpdateFamilies), families)
}

// Mockcdc is a mock of cdc interface.
type Mockcdc struct {
	ctrl     *gomock.Controller
	recorder *MockcdcMockRecorder
}

// MockcdcMockRecorder is the mock recorder for Mockcdc.
type MockcdcMockRecorder struct {
	mock *Mockcdc
}

// NewMockcdc creates a new mock instance.
func NewMockcdc(ctrl *gomock.Controller) *Mockcdc {
	mock := &Mockcdc{ctrl: ctrl}
	mock.recorder = &MockcdcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcdc) EXPECT() *MockcdcMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *Mockcdc) Emit(params *cdc_emitter.CDCParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", params)
}

// Emit indicates an expected call of Emit.
func (mr *MockcdcMockRecorder) Emit(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*Mockcdc)(nil).Emit), params)
}
