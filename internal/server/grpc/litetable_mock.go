// Code generated by MockGen. DO NOT EDIT.
// Source: ./litetable.go
//
// Generated by this command:
//
//	mockgen -destination=./litetable_mock.go -package=grpc -source=./litetable.go
//

// Package grpc is a generated GoMock package.
package grpc

import (
	net "net"
	reflect "reflect"

	litetable "github.com/litetable/litetable-db/internal/litetable"
	gomock "go.uber.org/mock/gomock"
)

// Mockoperations is a mock of operations interface.
type Mockoperations struct {
	ctrl     *gomock.Controller
	recorder *MockoperationsMockRecorder
}

// MockoperationsMockRecorder is the mock recorder for Mockoperations.
type MockoperationsMockRecorder struct {
	mock *Mockoperations
}

// NewMockoperations creates a new mock instance.
func NewMockoperations(ctrl *gomock.Controller) *Mockoperations {
	mock := &Mockoperations{ctrl: ctrl}
	mock.recorder = &MockoperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockoperations) EXPECT() *MockoperationsMockRecorder {
	return m.recorder
}

// CreateFamilies mocks base method.
func (m *Mockoperations) CreateFamilies(families []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFamilies", families)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFamilies indicates an expected call of CreateFamilies.
func (mr *MockoperationsMockRecorder) CreateFamilies(families any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFamilies", reflect.TypeOf((*Mockoperations)(nil).CreateFamilies), families)
}

// Delete mocks base method.
func (m *Mockoperations) Delete(query string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockoperationsMockRecorder) Delete(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockoperations)(nil).Delete), query)
}

// Read mocks base method.
func (m *Mockoperations) Read(query string) (map[string]*litetable.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", query)
	ret0, _ := ret[0].(map[string]*litetable.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockoperationsMockRecorder) Read(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Mockoperations)(nil).Read), query)
}

// Write mocks base method.
func (m *Mockoperations) Write(query string) (map[string]*litetable.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", query)
	ret0, _ := ret[0].(map[string]*litetable.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockoperationsMockRecorder) Write(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*Mockoperations)(nil).Write), query)
}

// MockgrpcServer is a mock of grpcServer interface.
type MockgrpcServer struct {
	ctrl     *gomock.Controller
	recorder *MockgrpcServerMockRecorder
}

// MockgrpcServerMockRecorder is the mock recorder for MockgrpcServer.
type MockgrpcServerMockRecorder struct {
	mock *MockgrpcServer
}

// NewMockgrpcServer creates a new mock instance.
func NewMockgrpcServer(ctrl *gomock.Controller) *MockgrpcServer {
	mock := &MockgrpcServer{ctrl: ctrl}
	mock.recorder = &MockgrpcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgrpcServer) EXPECT() *MockgrpcServerMockRecorder {
	return m.recorder
}

// GracefulStop mocks base method.
func (m *MockgrpcServer) GracefulStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulStop")
}

// GracefulStop indicates an expected call of GracefulStop.
func (mr *MockgrpcServerMockRecorder) GracefulStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulStop", reflect.TypeOf((*MockgrpcServer)(nil).GracefulStop))
}

// Serve mocks base method.
func (m *MockgrpcServer) Serve(lis net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", lis)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockgrpcServerMockRecorder) Serve(lis any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockgrpcServer)(nil).Serve), lis)
}
