// Code generated by MockGen. DO NOT EDIT.
// Source: ./server.go
//
// Generated by this command:
//
//	mockgen -destination ./server_mock.go -package server -source ./server.go
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockhttpServer is a mock of httpServer interface.
type MockhttpServer struct {
	ctrl     *gomock.Controller
	recorder *MockhttpServerMockRecorder
}

// MockhttpServerMockRecorder is the mock recorder for MockhttpServer.
type MockhttpServerMockRecorder struct {
	mock *MockhttpServer
}

// NewMockhttpServer creates a new mock instance.
func NewMockhttpServer(ctrl *gomock.Controller) *MockhttpServer {
	mock := &MockhttpServer{ctrl: ctrl}
	mock.recorder = &MockhttpServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpServer) EXPECT() *MockhttpServerMockRecorder {
	return m.recorder
}

// Addr mocks base method.
func (m *MockhttpServer) Addr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(string)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockhttpServerMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockhttpServer)(nil).Addr))
}

// ListenAndServe mocks base method.
func (m *MockhttpServer) ListenAndServe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe")
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe.
func (mr *MockhttpServerMockRecorder) ListenAndServe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockhttpServer)(nil).ListenAndServe))
}

// Shutdown mocks base method.
func (m *MockhttpServer) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockhttpServerMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockhttpServer)(nil).Shutdown), ctx)
}
